import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Sample dataset (Month-wise sales data)
data = {
    "Month": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
    "Sales": [200, 220, 250, 270, 300, 330, 360, 390, 410, 450, 470, 500]
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Split data into features (X) and target (y)
X = df[["Month"]]  # Independent variable
y = df["Sales"]  # Dependent variable

# Split into training (80%) and testing (20%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

# Train Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on test data
y_pred = model.predict(X_test)

# Compute performance metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Display results
print("Mean Squared Error:", mse)
print("R-Squared Score:", r2)

# Predict sales for the next month (Month = 13)
future_month = np.array([[13]])
future_sales = model.predict(future_month)
print("\nPredicted Sales for Next Month:", round(future_sales[0], 2))

# Plot actual vs predicted sales
plt.scatter(X, y, color="blue", label="Actual Sales")
plt.plot(X, model.predict(X), color="red", label="Predicted Trend")
plt.xlabel("Month")
plt.ylabel("Sales")
plt.title("Future Sales Prediction")
plt.legend()
plt.show()
