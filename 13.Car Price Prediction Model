import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Sample Dataset (Features: Year, Mileage, Fuel Type, Horsepower | Target: Price)
data = {
    "Year": [2015, 2012, 2018, 2020, 2017, 2014, 2011, 2016, 2019, 2013],
    "Mileage": [50000, 80000, 30000, 20000, 40000, 60000, 90000, 45000, 25000, 75000],
    "FuelType": [1, 0, 1, 1, 0, 1, 0, 1, 1, 0],  # 1 = Petrol, 0 = Diesel
    "Horsepower": [130, 110, 150, 180, 140, 125, 105, 135, 160, 115],
    "Price": [12000, 8000, 15000, 20000, 14000, 10000, 7000, 13000, 18000, 9000]
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Split data into features (X) and target (y)
X = df.iloc[:, :-1]  # Features
y = df["Price"]  # Target variable

# Split into training (80%) and testing (20%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

# Feature Scaling (Normalization)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Initialize and train Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on test data
y_pred = model.predict(X_test)

# Compute performance metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Display results
print("Mean Squared Error:", mse)
print("R-Squared Score:", r2)

# Predict price for a new car
new_car = np.array([[2018, 35000, 1, 140]])  # Example input
new_car_scaled = scaler.transform(new_car.reshape(1, -1))
predicted_price = model.predict(new_car_scaled)
print("\nPredicted Price for New Car: $", round(predicted_price[0], 2))

# Plot actual vs predicted prices
plt.scatter(y_test, y_pred, color="blue")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], linestyle='--', color='red')
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted Car Prices")
plt.show()
