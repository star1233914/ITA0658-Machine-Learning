import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC

# Load the Iris dataset
iris = load_iris()
X = iris.data  # Features
y = iris.target  # Labels (0 = Setosa, 1 = Versicolor, 2 = Virginica)

# Split dataset into training (80%) and testing (20%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

# Feature Scaling (for models that require it)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize classifiers
models = {
    "Logistic Regression": LogisticRegression(),
    "K-Nearest Neighbors (KNN)": KNeighborsClassifier(n_neighbors=5),
    "Decision Tree": DecisionTreeClassifier(),
    "Na√Øve Bayes": GaussianNB(),
    "Support Vector Machine (SVM)": SVC(kernel="linear")
}

# Train, predict, and evaluate each model
results = {}
for name, model in models.items():
    # Use scaled data for SVM and Logistic Regression
    if name in ["Support Vector Machine (SVM)", "Logistic Regression"]:
        model.fit(X_train_scaled, y_train)
        y_pred = model.predict(X_test_scaled)
    else:
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
    
    # Compute accuracy and store results
    accuracy = accuracy_score(y_test, y_pred)
    results[name] = accuracy

# Display results
print("Model Performance Comparison:\n")
for name, accuracy in results.items():
    print(f"{name}: {accuracy * 100:.2f}%")

# Plot accuracy comparison
plt.figure(figsize=(8, 5))
plt.bar(results.keys(), results.values(), color=['blue', 'green', 'red', 'purple', 'orange'])
plt.ylabel("Accuracy")
plt.title("Classification Algorithm Comparison")
plt.xticks(rotation=30)
plt.show()
