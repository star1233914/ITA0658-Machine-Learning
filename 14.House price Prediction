import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Sample Dataset (Features: Area, Bedrooms, Age, Location Type | Target: Price)
data = {
    "Area": [1500, 1800, 1200, 2200, 1700, 2500, 900, 2000, 1600, 1400],
    "Bedrooms": [3, 4, 2, 5, 3, 4, 2, 4, 3, 2],
    "Age": [10, 5, 15, 2, 8, 4, 20, 6, 7, 12],
    "LocationType": [1, 0, 1, 1, 0, 1, 0, 1, 0, 1],  # 1 = Urban, 0 = Suburban
    "Price": [250000, 320000, 180000, 400000, 270000, 450000, 150000, 350000, 260000, 200000]
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Split data into features (X) and target (y)
X = df.iloc[:, :-1]  # Features
y = df["Price"]  # Target variable

# Split into training (80%) and testing (20%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

# Feature Scaling (Normalization)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Initialize and train Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on test data
y_pred = model.predict(X_test)

# Compute performance metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Display results
print("Mean Squared Error:", mse)
print("R-Squared Score:", r2)

# Predict price for a new house
new_house = np.array([[2000, 3, 7, 1]])  # Example input
new_house_scaled = scaler.transform(new_house.reshape(1, -1))
predicted_price = model.predict(new_house_scaled)
print("\nPredicted Price for New House: $", round(predicted_price[0], 2))

# Plot actual vs predicted prices
plt.scatter(y_test, y_pred, color="blue")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], linestyle='--', color='red')
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted House Prices")
plt.show()
